@use "sass:meta";
@use "sass:map";

@use "../util/colorset" as cs;

@mixin apply($s) {
	:root, .default-colors, .theme-dark, .theme-light {
		@include cs.cs-each($s) using ($name) {
			@if cs.cs-is($s, $name, "color") {
				@if cs.csc-has-variants($s, $name) {
					@each $vname, $value in cs.csc-get-variants($s, $name) {
						--#{$name}-#{$vname}:     #{$value};
						--#{$name}-#{$vname}-rgb: #{red($value)}, #{blue($value)}, #{green($value)};
					}
				} @else {
					$value: cs.csc-get-color($s, $name);
					--#{$name}:     #{$value};
					--#{$name}-rgb: #{red($value)}, #{blue($value)}, #{green($value)};
				}
			}
		}
	}

	[class*=mentioned-]::before {
		background-color: #{cs.csc-get-color($s, "pill-mentioned")};
	}

	[class^=reaction-] {
		background-color: #{cs.csc-get-color($s, "reaction-background", $default:var(--background-secondary))};
	}

	[class^=mainContent-]:not([href])>[aria-label^=Text]+[class^=name-] {
		text-decoration: line-through;
	}

	[class^=expandedFolderBackground-] { // bruh...
		background-color: #{cs.csc-get-color($s, "expanded-folder-background", $default:var(--background-secondary))} !important;
	}
}
